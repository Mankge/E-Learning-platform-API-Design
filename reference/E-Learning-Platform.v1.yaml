openapi: 3.0.0
info:
  title: E-Learning Platform
  version: '1.0'
  description: |-
    This documentation explains how to successfully call the E-Learning Platform API with your app. The E-Learning Platform API allows simple queries to retrieve all the necessary data such courses on various subjects. Each course will be devided into a configurable number of modules, and each module will contain a configurable number of contents.

    > Before digging in, it's important to know that the API is focused on simplicity and complex. This means that it will be simple to use with no means of complications, it can be used by both simple and sophisicated applications.
  contact:
    name: Mbongeni Mankge
    url: mbongenidev.com
    email: mbongeni.dev@gmail.com
  license:
    name: License(MIT)
servers:
  - url: 'http://localhost:3000'
paths: {}
components:
  schemas:
    Course:
      title: Course
      type: object
      description: 'The online-learnig platform will offer courses on various subjects. Each course will be divided into a configurable number of modules/chapter, and each module will contain a configurable number of contents. The contents will be of various types: text, file, image, or video.'
      properties:
        id:
          type: number
          example: 123
          description: A unique identifier for the each course.
        owner:
          type: string
          example: Mbongeni Mankge
          description: The individual who created the course.
        subject:
          $ref: '#/components/schemas/Subject'
        title:
          type: string
          example: Software Development
          description: Title of the course.
        slug:
          type: string
          example: software-development
        overview:
          type: string
          example: This course teaches all the fundamental concepts required to create your first website.
          description: A brief description about the course.
        created:
          type: string
          example: 09-04-2021
          description: The date at which the course was created by the owner.
      required:
        - id
        - owner
        - subject
        - title
        - slug
        - overview
      x-examples:
        Course-example:
          id: 123
          owner: Mbongeni Mankge
          subject:
            id: 89
            title: Computer Science and Information Technology
            slug: computer-science-and-Information-technology
          title: Software Development
          slug: software-development
          overview: This course teaches all the fundamental concepts required to create your first website.
          created: 09-04-2021
    Subject:
      title: Subject
      type: object
      description: 'A unique subject model which offers different courses owned by different entities. The subject can be added by the system administrator, whereas the courses under that particular subject can be added by different instructors who are registered on the system and have permissions to do so.'
      properties:
        id:
          type: integer
          example: 89
          description: A unique id for each subject registered on the system.
        title:
          type: string
          example: Computer Science and Information Technology
          description: A unique subject title.
        slug:
          type: string
          example: computer-science-and-Information-technology
          description: A unique identifier for each subject. More helpful for differianting web address end-points.
      x-examples:
        Sample Example:
          id: 89
          title: Computer Science and Information Technology
          slug: computer-science-and-Information-technology
    Module:
      title: Module
      type: object
      x-examples:
        Module-example:
          id: 663
          title: Data structures and Algorithms
          description: Learning and understanding data structures and algorithms is an important skill for writing both optimized and bug-free code.
      properties:
        id:
          type: integer
          example: 663
          description: A unique identifier for each module.
        title:
          type: string
          example: Data structures and Algorithms
          description: A unique title for each module.
        description:
          type: string
          example: Learning and understanding data structures and algorithms is an important skill for writing both optimized and bug-free code.
          description: A short description explaining what the module is about.
      required:
        - id
        - title
      description: 'The module model is a basically a chapter that contains a configuarable number of contents. The contents will be of various types such as images, text, files(documents) or video.'
    Content:
      title: Content
      type: object
      x-examples:
        Content-Example:
          id: 366
          module:
            id: 663
            title: Data structures and Algorithms
            description: Learning and understanding data structures and algorithms is an important skill for writing both optimized and bug-free code.
          content_type: null
          object_id: 563
          item: null
      description: 'This is a versatile data model that allows one to store different or diverse content. For an instance, this model can represent a text, file or video etc. The Content model contains contents, so you define a Foreign Key field that points to the Module module. We then set a generic relation to associate objects from different models that represent different types of content. A different model for each type of content will be used. The content models will have some common fields but they will differ in the actual data they can store.'
      properties:
        id:
          type: integer
          example: 366
          description: Unique identifier for each Content.
        module:
          $ref: '#/components/schemas/Module'
        content_type:
          description: A ForeignKey field to the ContentType model.
          $ref: ''
        object_id:
          type: number
          example: 563
          description: A positive integer field gto store the primary key of the elated object.
        item:
          $ref: ''
    ItemBase:
      title: ItemBase
      type: object
      description: This is an abstract model that provides the common fields for all the divise content models.
      properties:
        id:
          type: number
          example: 33
          description: A unique identifier for each item content type.
        owner:
          type: string
          description: The name of the content item owner. Basically someone who created the item.
          example: Mbongeni Mankge
        title:
          type: string
          example: Introduction
          description: A unique title for the content item.
        created:
          type: string
          example: 12-04-2021
          description: The date the content was first created by the user.
        updated:
          type: string
          example: 24-04-2021
          description: The date at which the content was modified or updated.
      x-examples:
        ItemBase-Example:
          id: 33
          owner: Mbongeni Mankge
          title: Introduction
          created: 12-04-2021
          updated: 24-04-2021
  securitySchemes: {}
